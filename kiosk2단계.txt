// 변수 선언을 컴포넌트 외에 선언하는 이유
// 컴포넌트 내에서 한다면, re-rendering을 할때마다 변수 자체도 계속해서 새로 생성되기때문
// 이를 방지하고자 변수를 외부에서 선언한다.

import { useState } from "react"

const products = [
    { pno: 1, pname: "Americano", price: 10000 },
    { pno: 2, pname: "Latte", price: 8000 },
    { pno: 3, pname: "Milk Tea", price: 4000 },
    { pno: 4, pname: "Green Tea", price: 2000 },
]

const Kiosk = () => {
    // 2-1 카트에 담기 위해서 (useState로 re-rendering)
    const [items, setItems] = useState([])
    // Buy버튼을 누를시 카트에 보내주는 함수 
    const handleClickBuy = (product) => {
        // console 1차적 확인
        console.log({ product, qty: 1 })
        // 실제로 item이 있는지 아닌지 확인을위한 배열의 filter
        // ele.pno가 실제 변수 pno와 같는지 확인
        const result = items.filter(ele => ele.pno === product.pno)
        // result가 어떻게 나오는지 확인 하는 console
        console.log("result", result)
        // 배열 1개가 생성되거나 아예없거나 이므로 없다면 
        // 새로 items를 만들어줌 또한 다음진행이 안되게 하기위해 return처리
        if (result.length == 0) {
            setItems([...items, { ...product, qty: 1 }])
            return
        }
        // if의 경우가 아닐경우 result의 처음 배열인덱스값에
        // qty 수치 변경 및 setItems로 실제로 수정되게함
        const cartItem = result[0]
        cartItem.qty += 1
        setItems([...items])
    }

    return (
        <div className="w-full h-[100vh] bg-green-300 flex">

            <div className="w-2/3 bg-white">
                <div className="text-4xl font-serif">Procucts</div>
                <ul>
                    {products.map(p =>
                        <li key={p.pno} className="text-2xl underline m-3 p-3 bg-rose-300"
                            onClick={() => { handleClickBuy(p) }}>
                            {p.pno} - {p.pname} - {p.price}
                            <button className="border-2 m-2 p-2 rounded-sm bg-orange-300">BUY</button>
                        </li>

                    )}
                </ul>
            </div>

            <div className="w-1/3">
                <div className="text-4xl font-serif">Cart</div>

                <ul>
                    {items.map((item, idx) =>
                        <li key={idx} className="border-2 border-gray-950">
                            <div className="flex text-3xl m-4 p-4">
                                <div>{item.pno}</div>
                                <div>{item.pname}</div>
                                <div>{item.price}</div>
                            </div>
                            <div className="flex justify-center text-2xl">
                                <button className="rounded-lg bg-orange-600 p-4 m-1">+</button>
                                <p className="p-2 m-2 text-red-500">{item.qty}</p>
                                <button className="rounded-lg bg-orange-600 p-4 m-1">-</button>
                            </div>

                        </li>)}
                </ul>
            </div>

        </div>
    );
}

export default Kiosk;